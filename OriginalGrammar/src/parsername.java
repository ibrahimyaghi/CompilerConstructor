/* Generated By:JavaCC: Do not edit this line. parsername.java */
import java.util.*;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.lang.reflect.Field;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

public class parsername implements parsernameConstants {
  //Change this variable to get more information about code execution
  //It prints a lot of rubbish
  //Keep 'false' by default, swap to 'true' while debugging
  public static boolean verbose = false;
  public static void main(String args []) throws ParseException
  {
        //Get current directory
        String path = System.getProperty("user.dir");
        path+="\u005c\u005csrc\u005c\u005c";

        System.out.println("Provide name of the file to execute:");

        // Enter data using BufferReader
    BufferedReader reader = new BufferedReader(
    new InputStreamReader(System.in));

    // Read line
    String filename = "";
        try {
        filename = reader.readLine();
        }catch(Exception e) {
                System.out.println("Something went wrong while reading user input - error detected.");
                System.exit(-1) ;
        }

        path+=filename;

    parsername parser = null;
        try {
                //Access file with code
                //Hardcoded - > THE SAME DIRECTORY AS JAVA CODE, IT HAS TO BE CALLED "code.txt" TO WORK
                parser = new parsername(new FileInputStream(path));
        }
        catch (FileNotFoundException e) {
                System.out.println("File not found. Exiting.") ;
                System.exit(-1) ;
        }

    //If file was found, execute its contents
    if(verbose){System.out.println("Reading from file!");}

    try
    {
        //Map for global variables
        Map<String,Object> map=new HashMap<String,Object>();
                //Map for global functions and procedures
        Map<String,Map> fps=new HashMap<String,Map>();
        //This is the entry point for our language - sth like "main"
        parser.multipleLines(map, fps);
    }
    catch (Exception e)
    {
        System.out.println("Something went wrong - exception detected.");
        System.out.println(e.getMessage());
        System.exit(-1) ;
    }
    catch (Error e)
    {
        System.out.println("Something went wrong - error detected.");
        System.out.println(e.getMessage());
        System.exit(-1) ;
    }

        //Exit after successful code execution
    System.out.println("Code execution terminated");
  }

//DO NOT put <DO> in condition, otherwise loop will not start
  final public Token anyCondition() throws ParseException {
                      Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      t = jj_consume_token(INTEGER);
      break;
    case FLOAT:
      t = jj_consume_token(FLOAT);
      break;
    case INT_VARNAME:
      t = jj_consume_token(INT_VARNAME);
      break;
    case BOOL_VARNAME:
      t = jj_consume_token(BOOL_VARNAME);
      break;
    case FLOAT_VARNAME:
      t = jj_consume_token(FLOAT_VARNAME);
      break;
    case PLUS:
      t = jj_consume_token(PLUS);
      break;
    case MINUS:
      t = jj_consume_token(MINUS);
      break;
    case MULTIPLY:
      t = jj_consume_token(MULTIPLY);
      break;
    case DIVIDE:
      t = jj_consume_token(DIVIDE);
      break;
    case TRUE:
      t = jj_consume_token(TRUE);
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
      break;
    case LPARENTHESIS:
      t = jj_consume_token(LPARENTHESIS);
      break;
    case RPARENTHESIS:
      t = jj_consume_token(RPARENTHESIS);
      break;
    case AND:
      t = jj_consume_token(AND);
      break;
    case OR:
      t = jj_consume_token(OR);
      break;
    case NOT:
      t = jj_consume_token(NOT);
      break;
    case 44:
      t = jj_consume_token(44);
      break;
    case 45:
      t = jj_consume_token(45);
      break;
    case 46:
      t = jj_consume_token(46);
      break;
    case 47:
      t = jj_consume_token(47);
      break;
    case 48:
      t = jj_consume_token(48);
      break;
    case 49:
      t = jj_consume_token(49);
      break;
    case 50:
      t = jj_consume_token(50);
      break;
    case 51:
      t = jj_consume_token(51);
      break;
    case 52:
      t = jj_consume_token(52);
      break;
    case 53:
      t = jj_consume_token(53);
      break;
    case 54:
      t = jj_consume_token(54);
      break;
    case 55:
      t = jj_consume_token(55);
      break;
    case 56:
      t = jj_consume_token(56);
      break;
    case 57:
      t = jj_consume_token(57);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token any() throws ParseException {
             Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
    case MULTIPLY:
    case DIVIDE:
    case AND:
    case OR:
    case NOT:
    case INTEGER:
    case FLOAT:
    case LPARENTHESIS:
    case RPARENTHESIS:
    case TRUE:
    case FALSE:
    case INT_VARNAME:
    case BOOL_VARNAME:
    case FLOAT_VARNAME:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
      t = anyCondition();
      break;
    case IF:
      t = jj_consume_token(IF);
      break;
    case ELSE:
      t = jj_consume_token(ELSE);
      break;
    case ELSEIF:
      t = jj_consume_token(ELSEIF);
      break;
    case THEN:
      t = jj_consume_token(THEN);
      break;
    case ENDIF:
      t = jj_consume_token(ENDIF);
      break;
    case PRINT:
      t = jj_consume_token(PRINT);
      break;
    case WRITE:
      t = jj_consume_token(WRITE);
      break;
    case EQUAL:
      t = jj_consume_token(EQUAL);
      break;
    case SEMICOLON:
      t = jj_consume_token(SEMICOLON);
      break;
    case COMMA:
      t = jj_consume_token(COMMA);
      break;
    case INT:
      t = jj_consume_token(INT);
      break;
    case DOUBLE:
      t = jj_consume_token(DOUBLE);
      break;
    case BOOLEAN:
      t = jj_consume_token(BOOLEAN);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

//DO NOT put <ENDWHILE> in body, otherwise loop will not end
//Paradox is that we need <ENDWHILE> here for nested loops
  final public Token anyBody() throws ParseException {
                 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DO:
      t = jj_consume_token(DO);
      break;
    case PLUS:
    case MINUS:
    case MULTIPLY:
    case DIVIDE:
    case EQUAL:
    case AND:
    case OR:
    case NOT:
    case INTEGER:
    case FLOAT:
    case SEMICOLON:
    case COMMA:
    case LPARENTHESIS:
    case RPARENTHESIS:
    case INT:
    case DOUBLE:
    case BOOLEAN:
    case TRUE:
    case FALSE:
    case IF:
    case ELSE:
    case ELSEIF:
    case THEN:
    case ENDIF:
    case PRINT:
    case WRITE:
    case INT_VARNAME:
    case BOOL_VARNAME:
    case FLOAT_VARNAME:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
      t = any();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                               {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token anyProcedure() throws ParseException {
                      Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENDWHILE:
      t = jj_consume_token(ENDWHILE);
      break;
    case DO:
      t = jj_consume_token(DO);
      break;
    case WHILE:
      t = jj_consume_token(WHILE);
      break;
    case PLUS:
    case MINUS:
    case MULTIPLY:
    case DIVIDE:
    case EQUAL:
    case AND:
    case OR:
    case NOT:
    case INTEGER:
    case FLOAT:
    case SEMICOLON:
    case COMMA:
    case LPARENTHESIS:
    case RPARENTHESIS:
    case INT:
    case DOUBLE:
    case BOOLEAN:
    case TRUE:
    case FALSE:
    case IF:
    case ELSE:
    case ELSEIF:
    case THEN:
    case ENDIF:
    case PRINT:
    case WRITE:
    case INT_VARNAME:
    case BOOL_VARNAME:
    case FLOAT_VARNAME:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
      t = any();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                              {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

/*---------------------------------------------------------------------*/
/* DECLARE VARIABLES
/* We allow only simple initializations by values
/* No statements allowed here
/* We do not allow initialization of the same variable twice 
/*---------------------------------------------------------------------*/
  final public void declareINT(Map map, boolean execute, Map globals) throws ParseException {
 String a;
    jj_consume_token(INT);
    jj_consume_token(INT_VARNAME);
                           a = token.toString();
    jj_consume_token(EQUAL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      jj_consume_token(INTEGER);
                if(map.containsKey(a) || globals.containsKey(a)){System.out.println("Variable already declared. Exiting.."); System.exit(-1);}
                        if(execute){map.put(a, Integer.parseInt(token.image));}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      jj_consume_token(INTEGER);
                            if(map.containsKey(a) || globals.containsKey(a)){System.out.println("Variable already declared. Exiting.."); System.exit(-1);}
                        if(execute){map.put(a, -1*Integer.parseInt(token.image));}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_1;
      }
      jj_consume_token(COMMA);
      jj_consume_token(INT_VARNAME);
                                   a = token.toString();
      jj_consume_token(EQUAL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        jj_consume_token(INTEGER);
                            if(map.containsKey(a) || globals.containsKey(a)){System.out.println("Variable already declared. Exiting.."); System.exit(-1);}
                        if(execute){map.put(a, Integer.parseInt(token.image));}
        break;
      case MINUS:
        jj_consume_token(MINUS);
        jj_consume_token(INTEGER);
                                            if(map.containsKey(a) || globals.containsKey(a)){System.out.println("Variable already declared. Exiting.."); System.exit(-1);}
                        if(execute){map.put(a, -1*Integer.parseInt(token.image));}
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(SEMICOLON);
  }

  final public void declareBOOL(Map map, boolean execute, Map globals) throws ParseException {
 String a;
    jj_consume_token(BOOLEAN);
    jj_consume_token(BOOL_VARNAME);
                              a = token.toString();
    jj_consume_token(EQUAL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        if(map.containsKey(a) || globals.containsKey(a)){System.out.println("Variable already declared. Exiting.."); System.exit(-1);}
                                        if(execute){map.put(a, Boolean.parseBoolean(token.image)); }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      jj_consume_token(BOOL_VARNAME);
                              a = token.toString();
      jj_consume_token(EQUAL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
        jj_consume_token(TRUE);
        break;
      case FALSE:
        jj_consume_token(FALSE);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                        if(map.containsKey(a) || globals.containsKey(a)){System.out.println("Variable already declared. Exiting.."); System.exit(-1);}
                                        if(execute){map.put(a, Boolean.parseBoolean(token.image));}
    }
    jj_consume_token(SEMICOLON);
  }

  final public void declareFLOAT(Map map, boolean execute, Map globals) throws ParseException {
 String a;
    jj_consume_token(DOUBLE);
    jj_consume_token(FLOAT_VARNAME);
                              a = token.toString();
    jj_consume_token(EQUAL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOAT:
      jj_consume_token(FLOAT);
              if(map.containsKey(a) || globals.containsKey(a)){System.out.println("Variable already declared. Exiting.."); System.exit(-1);}
                if(execute){map.put(a, Double.parseDouble(token.image));}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      jj_consume_token(FLOAT);
                          if(map.containsKey(a) || globals.containsKey(a)){System.out.println("Variable already declared. Exiting.."); System.exit(-1);}
                if(execute){map.put(a, -1*Double.parseDouble(token.image));}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      jj_consume_token(FLOAT_VARNAME);
                              a = token.toString();
      jj_consume_token(EQUAL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FLOAT:
        jj_consume_token(FLOAT);
                  if(map.containsKey(a) || globals.containsKey(a)){System.out.println("Variable already declared. Exiting.."); System.exit(-1);}
                if(execute){map.put(a, Double.parseDouble(token.image));}
        break;
      case MINUS:
        jj_consume_token(MINUS);
        jj_consume_token(FLOAT);
                                  if(map.containsKey(a) || globals.containsKey(a)){System.out.println("Variable already declared. Exiting.."); System.exit(-1);}
                if(execute){map.put(a, -1*Double.parseDouble(token.image));}
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(SEMICOLON);
  }

/*---------------------------------------------------------------------*/
/* SINGLE/MULTIPLE LINES STARTS HERE*/
/*---------------------------------------------------------------------*/
  final public void multipleLines(Map map, Map fps) throws ParseException {
 boolean a, execute = true; int b; Map<String,Object> mainLocal = new HashMap<String,Object>();
    jj_consume_token(58);
    jj_consume_token(VARNAME);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case DOUBLE:
      case BOOLEAN:
      case 61:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_4;
      }
      if (jj_2_1(2)) {
        functionDeclaration(map, fps);
                 if(parsername.verbose){System.out.println("Function declared");}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 61:
          procedureDeclaration(map, fps);
                 if(parsername.verbose){System.out.println("Procedure declared");}
          break;
        case INT:
          declareINT(map, execute, map);
                 if(parsername.verbose){System.out.println("Global variable(s) declared: " + execute);}
          break;
        case DOUBLE:
          declareFLOAT(map, execute, map);
                 if(parsername.verbose){System.out.println("Global variable(s) declared: " + execute);}
          break;
        case BOOLEAN:
          declareBOOL(map, execute, map);
                 if(parsername.verbose){System.out.println("Global variable(s) declared: " + execute);}
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
   if(parsername.verbose){System.out.println("\u005cnEntering main");}
    jj_consume_token(59);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARNAME:
      case INT:
      case DOUBLE:
      case BOOLEAN:
      case IF:
      case WHILE:
      case PRINT:
      case WRITE:
      case INT_VARNAME:
      case BOOL_VARNAME:
      case FLOAT_VARNAME:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_5;
      }
      line(map, true, mainLocal, fps);
    }
    jj_consume_token(60);
         if(parsername.verbose){System.out.println("Exiting main\u005cn") ;{if (true) return;}}
  }

  final public void line(Map map, boolean execute, Map local, Map fps) throws ParseException {
 boolean a; int b; double c; Token s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOL_VARNAME:
      /*	Boolean value can be return either by boolean statement
      	or by any type of comparison, so we basically allow sth like:
      	Bb = EQB TRUE FALSE; 											*/
      
        s = jj_consume_token(BOOL_VARNAME);
      jj_consume_token(EQUAL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case VARNAME:
      case LPARENTHESIS:
      case TRUE:
      case FALSE:
      case BOOL_VARNAME:
        a = booleanExpression(map, local, fps);
        break;
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
        a = comparison(map, local, fps);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SEMICOLON);
    if(!execute){{if (true) return;}}
    if(!map.containsKey(s.toString())){
        if(!local.containsKey(s.toString()))
        {System.out.println("Left operand not declared. Exiting.."); System.exit(-1);}
        else {
                        local.replace(s.toString(), a);
        }
        }else{
        map.replace(s.toString(), a);
    }
    if(parsername.verbose){System.out.println("Result: " + a);}
    {if (true) return;}
      break;
    case INT_VARNAME:
      s = jj_consume_token(INT_VARNAME);
      jj_consume_token(EQUAL);
      b = integerExpression(map, local, fps);
      jj_consume_token(SEMICOLON);
    if(!execute){{if (true) return;}}
    if(!map.containsKey(s.toString())){
        if(!local.containsKey(s.toString()))
        {System.out.println("Left operand not declared. Exiting.."); System.exit(-1);}
        else {
                        local.replace(s.toString(), b);
        }
        }else{
        map.replace(s.toString(), b);
    }
    if(parsername.verbose){System.out.println("Result: " + b);}
    {if (true) return;}
      break;
    case FLOAT_VARNAME:
      s = jj_consume_token(FLOAT_VARNAME);
      jj_consume_token(EQUAL);
      c = floatExpression(map, local, fps);
      jj_consume_token(SEMICOLON);
    if(!execute){{if (true) return;}}
    if(!map.containsKey(s.toString())){
        if(!local.containsKey(s.toString()))
        {System.out.println("Left operand not declared. Exiting.."); System.exit(-1);}
        else {
                        local.replace(s.toString(), c);
        }
        }else{
        map.replace(s.toString(), c);
    }
    if(parsername.verbose){System.out.println("Result: " + c);}
    {if (true) return;}
      break;
    case INT:
      declareINT(local, execute, map);
                                         if(parsername.verbose){System.out.println("Local variable(s) declared: " + execute);} {if (true) return;}
      break;
    case DOUBLE:
      declareFLOAT(local, execute, map);
                                         if(parsername.verbose){System.out.println("Local variable(s) declared: " + execute);} {if (true) return;}
      break;
    case BOOLEAN:
      declareBOOL(local, execute, map);
                                         if(parsername.verbose){System.out.println("Local variable(s) declared: " + execute);} {if (true) return;}
      break;
    case IF:
      ifStatement(map, local, fps);
                                                 if(parsername.verbose){System.out.println("End of IF statement\u005cn");} {if (true) return;}
      break;
    case WHILE:
      whileLoop(map, local, fps);
                                                 if(parsername.verbose){System.out.println("End of loop\u005cn");} {if (true) return;}
      break;
    case VARNAME:
      procedureCall(map, fps);
                                                         if(parsername.verbose){System.out.println("End of procedure execution\u005cn");} {if (true) return;}
      break;
    case PRINT:
      print(map, local, execute);
                                                 if(parsername.verbose){System.out.println("PRINT executed\u005cn");} {if (true) return;}
      break;
    case WRITE:
      read(map, local, execute);
                                                         if(parsername.verbose){System.out.println("WRITE executed\u005cn");} {if (true) return;}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*---------------------------------------------------------------------*/
/*INTEGER ARITHMETIC STATS HERE*/
/*---------------------------------------------------------------------*/
  final public int integerExpression(Map map, Map local, Map fps) throws ParseException {
 int a, b;
    a = aterm(map, local, fps);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        b = aterm(map, local, fps);
                                         a += b;
        break;
      case MINUS:
        jj_consume_token(MINUS);
        b = aterm(map, local, fps);
                                                                                           a -= b;
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public int aterm(Map map, Map local, Map fps) throws ParseException {
 int a, b;
    a = asubterm(map, local, fps);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        jj_consume_token(MULTIPLY);
        b = asubterm(map, local, fps);
                                                a *= b;
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
        b = asubterm(map, local, fps);
                                                                                                     a /= b;
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public int asubterm(Map map, Map local, Map fps) throws ParseException {
 int a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      a = abase(map, local, fps);
                                        {if (true) return -a;}
      break;
    case INTEGER:
    case VARNAME:
    case LPARENTHESIS:
    case INT_VARNAME:
      a = abase(map, local, fps);
                                                                                  {if (true) return a;}
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public int abase(Map map, Map local, Map fps) throws ParseException {
 int a=0; Object tmp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      jj_consume_token(INTEGER);
                 a = Integer.parseInt(token.image);
      break;
    case LPARENTHESIS:
      jj_consume_token(LPARENTHESIS);
      a = integerExpression(map, local, fps);
      jj_consume_token(RPARENTHESIS);
      break;
    case INT_VARNAME:
      jj_consume_token(INT_VARNAME);
                      a = 1;
                try {
                        a = (Integer) map.get(token.toString());
                }
                catch(Exception e) {
                        try {
                                if(parsername.verbose){System.out.println("Checking local variables.");}
                                a = (Integer) local.get(token.toString());
                        }
                        catch(Exception f) {
                                System.out.println("Variable not declared. Exiting.."); System.exit(-1);
                        }
                }
      break;
    case VARNAME:
      tmp = functionCall(map, fps);
                                 try{a = (Integer)tmp;}catch(Exception e){System.out.println("Incompatible function return type."); System.exit(-1);}
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

/*---------------------------------------------------------------------*/
/*BOOLEAN ARITHMETIC STATS HERE*/
/*---------------------------------------------------------------------*/
  final public boolean booleanExpression(Map map, Map local, Map fps) throws ParseException {
 boolean a,b;
    a = bterm(map, local, fps);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_8;
      }
      jj_consume_token(OR);
      b = bterm(map, local, fps);
                                      a = a || b;
    }
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public boolean bterm(Map map, Map local, Map fps) throws ParseException {
 boolean a, b;
    a = bsubterm(map, local, fps);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_9;
      }
      jj_consume_token(AND);
      b = bsubterm(map, local, fps);
                                         a = a && b;
    }
   {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public boolean bsubterm(Map map, Map local, Map fps) throws ParseException {
 boolean a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      a = bbase(map, local, fps);
                                    {if (true) return !a;}
      break;
    case VARNAME:
    case LPARENTHESIS:
    case TRUE:
    case FALSE:
    case BOOL_VARNAME:
      a = bbase(map, local, fps);
                                                                              {if (true) return a;}
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public boolean bbase(Map map, Map local, Map fps) throws ParseException {
 boolean a = false; Object tmp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
          a = Boolean.parseBoolean(token.image);
      break;
    case FALSE:
      jj_consume_token(FALSE);
           a = Boolean.parseBoolean(token.image);
      break;
    case VARNAME:
      tmp = functionCall(map, fps);
                               try{a = (boolean) tmp;}catch(Exception e){System.out.println("Incompatible function return type."); System.exit(-1);}
      break;
    case LPARENTHESIS:
      jj_consume_token(LPARENTHESIS);
      a = booleanExpression(map, local, fps);
      jj_consume_token(RPARENTHESIS);
      break;
    case BOOL_VARNAME:
      jj_consume_token(BOOL_VARNAME);
                     a = true;
                try {
                        a = (Boolean) map.get(token.toString());
                }
                catch(Exception e) {
                        try {
                                if(parsername.verbose){System.out.println("Checking local variables.");}
                                a = (Boolean) local.get(token.toString());
                        }
                        catch(Exception f) {
                                System.out.println("Variable not declared. Exiting.."); System.exit(-1);
                        }
                }
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

/*---------------------------------------------------------------------*/
/*FLOAT ARITHMETIC STATS HERE*/
/*---------------------------------------------------------------------*/
  final public double floatExpression(Map map, Map local, Map fps) throws ParseException {
 double a, b;
    a = fterm(map, local, fps);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        b = fterm(map, local, fps);
                                         a += b;
        break;
      case MINUS:
        jj_consume_token(MINUS);
        b = fterm(map, local, fps);
                                                                                           a -= b;
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public double fterm(Map map, Map local, Map fps) throws ParseException {
 double a, b;
    a = fsubterm(map, local, fps);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        jj_consume_token(MULTIPLY);
        b = fsubterm(map, local, fps);
                                                a *= b;
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
        b = fsubterm(map, local, fps);
                                                                                                     a /= b;
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public double fsubterm(Map map, Map local, Map fps) throws ParseException {
 double a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      a = fbase(map, local, fps);
                                        {if (true) return -a;}
      break;
    case FLOAT:
    case VARNAME:
    case LPARENTHESIS:
    case FLOAT_VARNAME:
      a = fbase(map, local, fps);
                                                                                  {if (true) return a;}
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public double fbase(Map map, Map local, Map fps) throws ParseException {
 double a=0.0; Object tmp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOAT:
      jj_consume_token(FLOAT);
               a = Double.parseDouble(token.image);
      break;
    case LPARENTHESIS:
      jj_consume_token(LPARENTHESIS);
      a = floatExpression(map, local, fps);
      jj_consume_token(RPARENTHESIS);
      break;
    case FLOAT_VARNAME:
      jj_consume_token(FLOAT_VARNAME);
                       a = 1.0;
                try {
                        a = (double) map.get(token.toString());
                }
                catch(Exception e) {
                        try {
                                if(parsername.verbose){System.out.println("Checking local variables.");}
                                a = (double) local.get(token.toString());
                        }
                        catch(Exception f) {
                                System.out.println("Variable not declared. Exiting.."); System.exit(-1);
                        }
                }
      break;
    case VARNAME:
      tmp = functionCall(map, fps);
                                 try{a = (Double) tmp;}catch(Exception e){System.out.println("Incompatible function return type."); System.exit(-1);}
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

/*---------------------------------------------------------------------*/
/*COMPARISON STATEMENTS STATS HERE*/
/*---------------------------------------------------------------------*/
  final public boolean comparison(Map map, Map local, Map fps) throws ParseException {
 boolean a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 44:
    case 45:
      a = booleanComparison(map, local, fps);
      break;
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
      a = integerComparison(map, local, fps);
      break;
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
      a = floatComparison(map, local, fps);
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public boolean booleanComparison(Map map, Map local, Map fps) throws ParseException {
 boolean a, b;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 44:
      jj_consume_token(44);
      a = booleanExpression(map, local, fps);
      b = booleanExpression(map, local, fps);
                                                                                              {if (true) return a == b;}
      break;
    case 45:
      jj_consume_token(45);
      a = booleanExpression(map, local, fps);
      b = booleanExpression(map, local, fps);
                                                                                              {if (true) return a != b;}
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public boolean integerComparison(Map map, Map local, Map fps) throws ParseException {
 int a, b;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 46:
      jj_consume_token(46);
      a = integerExpression(map, local, fps);
      b = integerExpression(map, local, fps);
                                                                                              {if (true) return a == b;}
      break;
    case 47:
      jj_consume_token(47);
      a = integerExpression(map, local, fps);
      b = integerExpression(map, local, fps);
                                                                                              {if (true) return a != b;}
      break;
    case 48:
      jj_consume_token(48);
      a = integerExpression(map, local, fps);
      b = integerExpression(map, local, fps);
                                                                                              {if (true) return a >= b;}
      break;
    case 49:
      jj_consume_token(49);
      a = integerExpression(map, local, fps);
      b = integerExpression(map, local, fps);
                                                                                              {if (true) return a <= b;}
      break;
    case 50:
      jj_consume_token(50);
      a = integerExpression(map, local, fps);
      b = integerExpression(map, local, fps);
                                                                                              {if (true) return a > b;}
      break;
    case 51:
      jj_consume_token(51);
      a = integerExpression(map, local, fps);
      b = integerExpression(map, local, fps);
                                                                                              {if (true) return a < b;}
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public boolean floatComparison(Map map, Map local, Map fps) throws ParseException {
 double a, b;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 52:
      jj_consume_token(52);
      a = floatExpression(map, local, fps);
      b = floatExpression(map, local, fps);
                                                                                          {if (true) return a == b;}
      break;
    case 53:
      jj_consume_token(53);
      a = floatExpression(map, local, fps);
      b = floatExpression(map, local, fps);
                                                                                          {if (true) return a != b;}
      break;
    case 54:
      jj_consume_token(54);
      a = floatExpression(map, local, fps);
      b = floatExpression(map, local, fps);
                                                                                          {if (true) return a >= b;}
      break;
    case 55:
      jj_consume_token(55);
      a = floatExpression(map, local, fps);
      b = floatExpression(map, local, fps);
                                                                                          {if (true) return a <= b;}
      break;
    case 56:
      jj_consume_token(56);
      a = floatExpression(map, local, fps);
      b = floatExpression(map, local, fps);
                                                                                          {if (true) return a > b;}
      break;
    case 57:
      jj_consume_token(57);
      a = floatExpression(map, local, fps);
      b = floatExpression(map, local, fps);
                                                                                          {if (true) return a < b;}
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*---------------------------------------------------------------------*/
/*IF STATEMENT STARTS HERE*/
/*---------------------------------------------------------------------*/
  final public void ifStatement(Map map, Map locals, Map fps) throws ParseException {
        boolean execute = false; boolean done = false;
        Map<String,Object> localVariables = new HashMap<String,Object>();

        //Perform a deep copy of local variables
        Iterator<Map.Entry<String, Object>> iterator = locals.entrySet().iterator();
    while (iterator.hasNext()) {
        Map.Entry<String, Object> entry = iterator.next();
        localVariables.put(entry.getKey(), entry.getValue());
    }
    jj_consume_token(IF);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
      execute = comparison(map, localVariables, fps);
      break;
    case NOT:
    case VARNAME:
    case LPARENTHESIS:
    case TRUE:
    case FALSE:
    case BOOL_VARNAME:
      execute = booleanExpression(map, localVariables, fps);
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         done = execute; if(parsername.verbose){System.out.println("\u005cnIf executed: " + execute);}
    jj_consume_token(THEN);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARNAME:
      case INT:
      case DOUBLE:
      case BOOLEAN:
      case IF:
      case WHILE:
      case PRINT:
      case WRITE:
      case INT_VARNAME:
      case BOOL_VARNAME:
      case FLOAT_VARNAME:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_12;
      }
      line(map, execute, localVariables, fps);
    }
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSEIF:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_13;
      }
      jj_consume_token(ELSEIF);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
        execute = comparison(map, localVariables, fps);
        break;
      case NOT:
      case VARNAME:
      case LPARENTHESIS:
      case TRUE:
      case FALSE:
      case BOOL_VARNAME:
        execute = booleanExpression(map, localVariables, fps);
        break;
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
           execute = execute && !done; done = done || execute; if(parsername.verbose){System.out.println("Elseif executed: " + execute);}
      jj_consume_token(THEN);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VARNAME:
        case INT:
        case DOUBLE:
        case BOOLEAN:
        case IF:
        case WHILE:
        case PRINT:
        case WRITE:
        case INT_VARNAME:
        case BOOL_VARNAME:
        case FLOAT_VARNAME:
          ;
          break;
        default:
          jj_la1[42] = jj_gen;
          break label_14;
        }
        line(map, execute, localVariables, fps);
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
                  if(parsername.verbose){System.out.println("Else executed: " + !done);}
      jj_consume_token(THEN);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VARNAME:
        case INT:
        case DOUBLE:
        case BOOLEAN:
        case IF:
        case WHILE:
        case PRINT:
        case WRITE:
        case INT_VARNAME:
        case BOOL_VARNAME:
        case FLOAT_VARNAME:
          ;
          break;
        default:
          jj_la1[43] = jj_gen;
          break label_15;
        }
        line(map, !done, localVariables, fps);
      }
      jj_consume_token(ENDIF);
      break;
    case ENDIF:
      jj_consume_token(ENDIF);
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                Iterator<Map.Entry<String, Object>> iterator2 = locals.entrySet().iterator();
            while (iterator2.hasNext()) {
                Map.Entry<String, Object> entry = iterator2.next();
                if(entry.getValue() != localVariables.get(entry.getKey())) {
                                locals.put(entry.getKey(), localVariables.get(entry.getKey()));
                }
        }
  }

/*---------------------------------------------------------------------*/
/*PRINT FUNCTION STARTS HERE*/
/*---------------------------------------------------------------------*/
  final public void print(Map map, Map local, boolean execute) throws ParseException {
 boolean a; int b; double c;
    jj_consume_token(PRINT);
    jj_consume_token(LPARENTHESIS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOAT_VARNAME:
      jj_consume_token(FLOAT_VARNAME);
        if(execute){
                        try {
                                c = (double) map.get(token.toString()); System.out.println(token.toString()+"="+c);
                        }
                        catch(Exception e) {
                                try {
                                        if(parsername.verbose){System.out.println("Checking local variables.");}
                                        c = (double) local.get(token.toString()); System.out.println(token.toString()+"="+c);
                                }
                                catch(Exception f) {
                                        System.out.println("Float variable not declared. Cannot print. Exiting.."); System.exit(-1);
                                }
                        }
                }
      break;
    case BOOL_VARNAME:
      jj_consume_token(BOOL_VARNAME);
        if(execute){
                try {
                                a = (Boolean) map.get(token.toString()); System.out.println(token.toString()+"="+a);
                        }
                        catch(Exception e) {
                                try {
                                        if(parsername.verbose){System.out.println("Checking local variables.");}
                                        a = (Boolean) local.get(token.toString()); System.out.println(token.toString()+"="+a);
                                }
                                catch(Exception f) {
                                        System.out.println("Boolean variable not declared. Cannot print. Exiting.."); System.exit(-1);
                                }
                        }
                }
      break;
    case INT_VARNAME:
      jj_consume_token(INT_VARNAME);
        if(execute){
                        try {
                                b = (Integer) map.get(token.toString()); System.out.println(token.toString()+"="+b);
                        }
                        catch(Exception e) {
                                try {
                                        if(parsername.verbose){System.out.println("Checking local variables.");}
                                        b = (Integer) local.get(token.toString()); System.out.println(token.toString()+"="+b);
                                }
                                catch(Exception f) {
                                        System.out.println("Integer variable not declared. Cannot print. Exiting.."); System.exit(-1);
                                }
                        }
                }
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RPARENTHESIS);
    jj_consume_token(SEMICOLON);
  }

/*---------------------------------------------------------------------*/
/*READ FUNCTION STARTS HERE*/
/*---------------------------------------------------------------------*/
  final public void read(Map map, Map local, boolean execute) throws ParseException {
 Token tmp = null;
                System.out.println("Reading value from input stream: ");
                if(!execute){{if (true) return;}}

            // Enter data using BufferReader
        BufferedReader reader = new BufferedReader(
        new InputStreamReader(System.in));

        // Read line
        String value = "";
                try {
                value = reader.readLine();
                }catch(Exception e) {
                        System.out.println("Something went wrong while reading user input - error detected.");
                        System.exit(-1) ;
                }
    jj_consume_token(WRITE);
    jj_consume_token(LPARENTHESIS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_VARNAME:
      tmp = jj_consume_token(INT_VARNAME);
      break;
    case FLOAT_VARNAME:
      tmp = jj_consume_token(FLOAT_VARNAME);
      break;
    case BOOL_VARNAME:
      tmp = jj_consume_token(BOOL_VARNAME);
      break;
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if(!map.containsKey(tmp.toString())){
                if(!local.containsKey(tmp.toString()))
                {System.out.println("Variable not declared. Exiting.."); System.exit(-1);}
                else {
                                local.put(tmp.toString(), value);
                }
                }else{
                map.put(tmp.toString(), value);
            }
    jj_consume_token(RPARENTHESIS);
    jj_consume_token(SEMICOLON);
  }

/*---------------------------------------------------------------------*/
/*WHILE START HERE*/
/*---------------------------------------------------------------------*/
  final public void linesInLoop(Map map, Map local, Map fps) throws ParseException {
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARNAME:
      case INT:
      case DOUBLE:
      case BOOLEAN:
      case IF:
      case WHILE:
      case PRINT:
      case WRITE:
      case INT_VARNAME:
      case BOOL_VARNAME:
      case FLOAT_VARNAME:
        ;
        break;
      default:
        jj_la1[47] = jj_gen;
        break label_16;
      }
      line(map, true, local, fps);
    }
  }

  final public boolean conditionInLoop(Map map, Map local, Map fps) throws ParseException {
                                                       boolean execute;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
      execute = comparison(map, local, fps);
      break;
    case NOT:
    case VARNAME:
    case LPARENTHESIS:
    case TRUE:
    case FALSE:
    case BOOL_VARNAME:
      execute = booleanExpression(map, local, fps);
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return execute;}
    throw new Error("Missing return statement in function");
  }

  final public void whileLoop(Map map, Map locals, Map fps) throws ParseException {
        boolean execute = false;
        Map<String,Object> localVariables = new HashMap<String,Object>();

        //Perform a deep copy of local variables
        Iterator<Map.Entry<String, Object>> iterator = locals.entrySet().iterator();
    while (iterator.hasNext()) {
        Map.Entry<String, Object> entry = iterator.next();
        localVariables.put(entry.getKey(), entry.getValue());
    }
    Token t = null;
    List<Token> body = new ArrayList<Token>();
    List<Token> condition = new ArrayList<Token>();
    jj_consume_token(WHILE);
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case MULTIPLY:
      case DIVIDE:
      case AND:
      case OR:
      case NOT:
      case INTEGER:
      case FLOAT:
      case LPARENTHESIS:
      case RPARENTHESIS:
      case TRUE:
      case FALSE:
      case INT_VARNAME:
      case BOOL_VARNAME:
      case FLOAT_VARNAME:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
        ;
        break;
      default:
        jj_la1[49] = jj_gen;
        break label_17;
      }
      t = anyCondition();
                                     condition.add(t);
    }
    jj_consume_token(DO);
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case MULTIPLY:
      case DIVIDE:
      case EQUAL:
      case AND:
      case OR:
      case NOT:
      case INTEGER:
      case FLOAT:
      case SEMICOLON:
      case COMMA:
      case LPARENTHESIS:
      case RPARENTHESIS:
      case INT:
      case DOUBLE:
      case BOOLEAN:
      case TRUE:
      case FALSE:
      case IF:
      case ELSE:
      case ELSEIF:
      case THEN:
      case ENDIF:
      case WHILE:
      case DO:
      case PRINT:
      case WRITE:
      case INT_VARNAME:
      case BOOL_VARNAME:
      case FLOAT_VARNAME:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
        ;
        break;
      default:
        jj_la1[50] = jj_gen;
        break label_18;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case MULTIPLY:
      case DIVIDE:
      case EQUAL:
      case AND:
      case OR:
      case NOT:
      case INTEGER:
      case FLOAT:
      case SEMICOLON:
      case COMMA:
      case LPARENTHESIS:
      case RPARENTHESIS:
      case INT:
      case DOUBLE:
      case BOOLEAN:
      case TRUE:
      case FALSE:
      case IF:
      case ELSE:
      case ELSEIF:
      case THEN:
      case ENDIF:
      case DO:
      case PRINT:
      case WRITE:
      case INT_VARNAME:
      case BOOL_VARNAME:
      case FLOAT_VARNAME:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
        t = anyBody();
                        body.add(t);
        break;
      case WHILE:
        whileLoop(map, localVariables, fps);
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(ENDWHILE);
                //Convert condition and body into a string
                String condition_string = "";
                for (int i = 0; i < condition.size(); i++) {
                        condition_string+=" ";
                    condition_string+=condition.get(i).toString();
                }

                String body_string = "";
                for (int i = 0; i < body.size(); i++) {
                        body_string+=" ";
                    body_string+=body.get(i).toString();
                }

                //Convert strings into input stream
                InputStream bodyStream          = new ByteArrayInputStream(body_string.getBytes());
                InputStream conditionStream = new ByteArrayInputStream(condition_string.getBytes());

                if(parsername.verbose){
                        System.out.println("\u005cnStarting loop");
                        System.out.println("Condition: "+condition_string);
                        System.out.println("Body: "+body_string);
                }

                parsername parser_body          = new parsername(bodyStream);
                parsername parser_condition = new parsername(conditionStream);

                try
            {
                while(parser_condition.conditionInLoop(map, localVariables, fps)){
                                parser_body.linesInLoop(map, localVariables, fps);
                                if(parsername.verbose){System.out.println("Loop interation executed");}

                                //Reseting input stream and parsers for potential next iteration
                                bodyStream              = new ByteArrayInputStream(body_string.getBytes());
                conditionStream         = new ByteArrayInputStream(condition_string.getBytes());
                                parser_body             = new parsername(bodyStream);
                                parser_condition        = new parsername(conditionStream);
                        }
            }
            catch (Exception e)
            {
                System.out.println("Something went wrong in a loop - exception detected.");
                System.out.println(e.getMessage());
                System.exit(-1) ;
            }
            catch (Error e)
            {
                System.out.println("Something went wrong in a loop - error detected.");
                System.out.println(e.getMessage());
                System.exit(-1) ;
            }

                //Check if any of the local variables were changed
                Iterator<Map.Entry<String, Object>> iterator2 = locals.entrySet().iterator();
            while (iterator2.hasNext()) {
                Map.Entry<String, Object> entry = iterator2.next();
                if(entry.getValue() != localVariables.get(entry.getKey())) {
                                locals.put(entry.getKey(), localVariables.get(entry.getKey()));
                }
        }
  }

/*---------------------------------------------------------------------*/
/*PROCEDURE START HERE*/
/*---------------------------------------------------------------------*/
  final public void procedureDeclaration(Map map, Map fps) throws ParseException {
        Map<String,Object> localVariables = new HashMap<String,Object>();
        Token tmp = null, s;
        List<Token> body = new ArrayList<Token>();
        int position = 1;
    jj_consume_token(61);
    s = jj_consume_token(VARNAME);
                //Look for name collisions
                if(fps.containsKey(s.toString())){
                        System.out.println("Procedure with this name has already been defined"); System.exit(-1);
                }
    if (jj_2_2(2)) {
      jj_consume_token(LPARENTHESIS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        jj_consume_token(INT);
        tmp = jj_consume_token(INT_VARNAME);
        break;
      case DOUBLE:
        jj_consume_token(DOUBLE);
        tmp = jj_consume_token(FLOAT_VARNAME);
        break;
      case BOOLEAN:
        jj_consume_token(BOOLEAN);
        tmp = jj_consume_token(BOOL_VARNAME);
        break;
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                         localVariables.put(tmp.toString(), "Var"+position); position++;
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[53] = jj_gen;
          break label_19;
        }
        jj_consume_token(COMMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
          jj_consume_token(INT);
          tmp = jj_consume_token(INT_VARNAME);
          break;
        case DOUBLE:
          jj_consume_token(DOUBLE);
          tmp = jj_consume_token(FLOAT_VARNAME);
          break;
        case BOOLEAN:
          jj_consume_token(BOOLEAN);
          tmp = jj_consume_token(BOOL_VARNAME);
          break;
        default:
          jj_la1[54] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                         localVariables.put(tmp.toString(), "Var"+position); position++;
      }
      jj_consume_token(RPARENTHESIS);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPARENTHESIS:
        jj_consume_token(LPARENTHESIS);
        jj_consume_token(RPARENTHESIS);
        break;
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case MULTIPLY:
      case DIVIDE:
      case EQUAL:
      case AND:
      case OR:
      case NOT:
      case INTEGER:
      case FLOAT:
      case SEMICOLON:
      case COMMA:
      case LPARENTHESIS:
      case RPARENTHESIS:
      case INT:
      case DOUBLE:
      case BOOLEAN:
      case TRUE:
      case FALSE:
      case IF:
      case ELSE:
      case ELSEIF:
      case THEN:
      case ENDIF:
      case WHILE:
      case DO:
      case ENDWHILE:
      case PRINT:
      case WRITE:
      case INT_VARNAME:
      case BOOL_VARNAME:
      case FLOAT_VARNAME:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
        ;
        break;
      default:
        jj_la1[56] = jj_gen;
        break label_20;
      }
      tmp = anyProcedure();
                                     body.add(tmp);
    }
                //Save contents of the procedure
                localVariables.put("BODY", body);
                //Save procedure to the global memory
                fps.put(s.toString(), localVariables);
                if(parsername.verbose){System.out.println(fps.get(s.toString())+"Procedure saved\u005cn");}
    jj_consume_token(62);
  }

//We only accept variables as variables in the procedure call 
  final public void procedureCall(Map map, Map fps) throws ParseException {
        Map<String,Object> localVariables = new HashMap<String,Object>();
        Token tmp;
        int parameter = 1;
        Map<String, Object> data = null;
        boolean found = false;
    tmp = jj_consume_token(VARNAME);
                //Recover data gathered during declaration
                data = (Map<String, Object>) fps.get(tmp.toString()); if(parsername.verbose){System.out.println(data);}
                //Check if procedure exists at all
                if(data == null) {
                        System.out.println("Procedure with this name does not exist, exiting"); System.exit(-1);
                }
    if (jj_2_3(2)) {
      jj_consume_token(LPARENTHESIS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT_VARNAME:
        tmp = jj_consume_token(INT_VARNAME);
        break;
      case FLOAT_VARNAME:
        tmp = jj_consume_token(FLOAT_VARNAME);
        break;
      case BOOL_VARNAME:
        tmp = jj_consume_token(BOOL_VARNAME);
        break;
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                for (Map.Entry<String, Object> entry : data.entrySet()) {
                                if (entry.getValue().equals("Var"+parameter)) {
                                        localVariables.put(entry.getKey(), map.get(tmp.toString()));
                                        found = true;
                                        break;
                                }
                            }
                                //Check if parameter was correctly found and substituted
                                if(!found){
                                        System.out.println("Incorrect parameter, exiting"); System.exit(-1);
                                }
                                //Prepare for next iteration
                                parameter++;
                                found = false;
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[58] = jj_gen;
          break label_21;
        }
        jj_consume_token(COMMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT_VARNAME:
          tmp = jj_consume_token(INT_VARNAME);
          break;
        case FLOAT_VARNAME:
          tmp = jj_consume_token(FLOAT_VARNAME);
          break;
        case BOOL_VARNAME:
          tmp = jj_consume_token(BOOL_VARNAME);
          break;
        default:
          jj_la1[59] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                for (Map.Entry<String, Object> entry : data.entrySet()) {
                                if (entry.getValue().equals("Var"+parameter)) {
                                        localVariables.put(entry.getKey(), map.get(tmp.toString()));
                                        found = true;
                                        break;
                                }
                            }

                                //Check if parameter was correctly found and substituted
                                if(!found){
                                        System.out.println("Incorrect parameter, exiting."); System.exit(-1);
                                }
                                //Prepare for next iteration
                                parameter++;
                                found = false;
      }
      jj_consume_token(RPARENTHESIS);
      jj_consume_token(SEMICOLON);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPARENTHESIS:
        jj_consume_token(LPARENTHESIS);
        jj_consume_token(RPARENTHESIS);
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                //Safety check - case of too few parameters passed to the function
                for (Map.Entry<String, Object> entry : data.entrySet()) {
                if (entry.getValue().equals("Var"+parameter)) {
                                System.out.println("Too few parameters passed to the function, exiting."); System.exit(-1);
                        }
                }

                //Time to execute the procedure
                //Get the contents of the procedure into body
                //Convert condition and body into a string
                String procedure_contents = data.get("BODY").toString();
                procedure_contents = procedure_contents.replaceAll(", "," ");
                procedure_contents = procedure_contents.replace("[","");
                procedure_contents = procedure_contents.replace("]","");

                //Convert string into input stream and pass to the parser
                InputStream bodyStream = new ByteArrayInputStream(procedure_contents.getBytes());
                parsername parser_body = new parsername(bodyStream);

                if(parsername.verbose){
                        System.out.println("\u005cnStarting procedure execution");
                        System.out.println("Body: "+procedure_contents);
                }

                try
            {
                        parser_body.linesInLoop(map, localVariables, fps);
            }
            catch (Exception e)
            {
                System.out.println("Something went wrong in a procedure - exception detected.");
                System.out.println(e.getMessage());
                System.exit(-1) ;
            }
            catch (Error e)
            {
                System.out.println("Something went wrong in a procedure - error detected.");
                System.out.println(e.getMessage());
                System.exit(-1) ;
            }

                if(parsername.verbose){System.out.println("Local vars: "+localVariables);}
  }

/*---------------------------------------------------------------------*/
/*FUNCTIONS START HERE*/
/*---------------------------------------------------------------------*/
  final public void functionDeclaration(Map map, Map fps) throws ParseException {
        Map<String,Object> localVariables = new HashMap<String,Object>();
        Token tmp = null, s;
        List<Token> body = new ArrayList<Token>();
        List<Token> ret = new ArrayList<Token>();
        int position = 1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      tmp = jj_consume_token(INT);
      break;
    case DOUBLE:
      tmp = jj_consume_token(DOUBLE);
      break;
    case BOOLEAN:
      tmp = jj_consume_token(BOOLEAN);
      break;
    default:
      jj_la1[61] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(63);
    s = jj_consume_token(VARNAME);
                //Look for name collisions
                if(fps.containsKey(s.toString())){
                        System.out.println("Function with this name has already been defined"); System.exit(-1);
                }
                //Save return type
                localVariables.put("TYPE", tmp);
    if (jj_2_4(2)) {
      jj_consume_token(LPARENTHESIS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        jj_consume_token(INT);
        tmp = jj_consume_token(INT_VARNAME);
        break;
      case DOUBLE:
        jj_consume_token(DOUBLE);
        tmp = jj_consume_token(FLOAT_VARNAME);
        break;
      case BOOLEAN:
        jj_consume_token(BOOLEAN);
        tmp = jj_consume_token(BOOL_VARNAME);
        break;
      default:
        jj_la1[62] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                         localVariables.put(tmp.toString(), "Var"+position); position++;
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[63] = jj_gen;
          break label_22;
        }
        jj_consume_token(COMMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
          jj_consume_token(INT);
          tmp = jj_consume_token(INT_VARNAME);
          break;
        case DOUBLE:
          jj_consume_token(DOUBLE);
          tmp = jj_consume_token(FLOAT_VARNAME);
          break;
        case BOOLEAN:
          jj_consume_token(BOOLEAN);
          tmp = jj_consume_token(BOOL_VARNAME);
          break;
        default:
          jj_la1[64] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                         localVariables.put(tmp.toString(), "Var"+position); position++;
      }
      jj_consume_token(RPARENTHESIS);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPARENTHESIS:
        jj_consume_token(LPARENTHESIS);
        jj_consume_token(RPARENTHESIS);
        break;
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case MULTIPLY:
      case DIVIDE:
      case EQUAL:
      case AND:
      case OR:
      case NOT:
      case INTEGER:
      case FLOAT:
      case SEMICOLON:
      case COMMA:
      case LPARENTHESIS:
      case RPARENTHESIS:
      case INT:
      case DOUBLE:
      case BOOLEAN:
      case TRUE:
      case FALSE:
      case IF:
      case ELSE:
      case ELSEIF:
      case THEN:
      case ENDIF:
      case WHILE:
      case DO:
      case ENDWHILE:
      case PRINT:
      case WRITE:
      case INT_VARNAME:
      case BOOL_VARNAME:
      case FLOAT_VARNAME:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
        ;
        break;
      default:
        jj_la1[66] = jj_gen;
        break label_23;
      }
      tmp = anyProcedure();
                                     body.add(tmp);
    }
    jj_consume_token(64);
                //Save contents of the function
                localVariables.put("BODY", body);
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case MULTIPLY:
      case DIVIDE:
      case EQUAL:
      case AND:
      case OR:
      case NOT:
      case INTEGER:
      case FLOAT:
      case SEMICOLON:
      case COMMA:
      case LPARENTHESIS:
      case RPARENTHESIS:
      case INT:
      case DOUBLE:
      case BOOLEAN:
      case TRUE:
      case FALSE:
      case IF:
      case ELSE:
      case ELSEIF:
      case THEN:
      case ENDIF:
      case WHILE:
      case DO:
      case ENDWHILE:
      case PRINT:
      case WRITE:
      case INT_VARNAME:
      case BOOL_VARNAME:
      case FLOAT_VARNAME:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
        ;
        break;
      default:
        jj_la1[67] = jj_gen;
        break label_24;
      }
      tmp = anyProcedure();
                                     ret.add(tmp);
    }
                //Save return of the function
                localVariables.put("RETURN", ret);
                //Save function to the global memory
                fps.put(s.toString(), localVariables);
                if(parsername.verbose){System.out.println(fps.get(s.toString())+"Function saved\u005cn");}
    jj_consume_token(65);
  }

  final public Object functionCall(Map map, Map fps) throws ParseException {
        Map<String,Object> localVariables = new HashMap<String,Object>();
        Token tmp;
        int parameter = 1;
        Map<String, Object> data = null;
        boolean found = false;
    tmp = jj_consume_token(VARNAME);
                //Recover data gathered during declaration
                data = (Map<String, Object>) fps.get(tmp.toString()); if(parsername.verbose){System.out.println(data);}
                //Check if procedure exists at all
                if(data == null) {
                        System.out.println("Function with this name does not exist, exiting"); System.exit(-1);
                }
    if (jj_2_5(2)) {
      jj_consume_token(LPARENTHESIS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT_VARNAME:
        tmp = jj_consume_token(INT_VARNAME);
        break;
      case FLOAT_VARNAME:
        tmp = jj_consume_token(FLOAT_VARNAME);
        break;
      case BOOL_VARNAME:
        tmp = jj_consume_token(BOOL_VARNAME);
        break;
      default:
        jj_la1[68] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                for (Map.Entry<String, Object> entry : data.entrySet()) {
                                if (entry.getValue().equals("Var"+parameter)) {
                                        localVariables.put(entry.getKey(), map.get(tmp.toString()));
                                        found = true;
                                        break;
                                }
                            }
                                //Check if parameter was correctly found and substituted
                                if(!found){
                                        System.out.println("Incorrect parameter, exiting"); System.exit(-1);
                                }
                                //Prepare for next iteration
                                parameter++;
                                found = false;
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[69] = jj_gen;
          break label_25;
        }
        jj_consume_token(COMMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT_VARNAME:
          tmp = jj_consume_token(INT_VARNAME);
          break;
        case FLOAT_VARNAME:
          tmp = jj_consume_token(FLOAT_VARNAME);
          break;
        case BOOL_VARNAME:
          tmp = jj_consume_token(BOOL_VARNAME);
          break;
        default:
          jj_la1[70] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                for (Map.Entry<String, Object> entry : data.entrySet()) {
                                if (entry.getValue().equals("Var"+parameter)) {
                                        localVariables.put(entry.getKey(), map.get(tmp.toString()));
                                        found = true;
                                        break;
                                }
                            }

                                //Check if parameter was correctly found and substituted
                                if(!found){
                                        System.out.println("Incorrect parameter, exiting."); System.exit(-1);
                                }
                                //Prepare for next iteration
                                parameter++;
                                found = false;
      }
      jj_consume_token(RPARENTHESIS);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPARENTHESIS:
        jj_consume_token(LPARENTHESIS);
        jj_consume_token(RPARENTHESIS);
        break;
      default:
        jj_la1[71] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                //Safety check - case of too few parameters passed to the function
                for (Map.Entry<String, Object> entry : data.entrySet()) {
                if (entry.getValue().equals("Var"+parameter)) {
                                System.out.println("Too few parameters passed to the function, exiting."); System.exit(-1);
                        }
                }

                //Time to execute the procedure
                //Get the contents of the procedure into body
                //Convert condition and body into a string
                String procedure_contents = data.get("BODY").toString();
                procedure_contents = procedure_contents.replaceAll(", "," ");
                procedure_contents = procedure_contents.replace("[","");
                procedure_contents = procedure_contents.replace("]","");

                String return_contents = data.get("RETURN").toString();
                return_contents = return_contents.replaceAll(", "," ");
                return_contents = return_contents.replace("[","");
                return_contents = return_contents.replace("]","");

                //Convert string into input stream and pass to the parser
                InputStream bodyStream          = new ByteArrayInputStream(procedure_contents.getBytes());
                InputStream returnStream        = new ByteArrayInputStream(return_contents.getBytes());
                parsername parser_body          = new parsername(bodyStream);
                parsername parser_return        = new parsername(returnStream);

                if(parsername.verbose){
                        System.out.println("\u005cnStarting function execution");
                        System.out.println("Body: "+procedure_contents);
                        System.out.println("Return: "+return_contents);
                }

                try
            {
                //Perform body of the function
                        parser_body.linesInLoop(map, localVariables, fps);
                        Integer a = 0; Double b = 0.0; Boolean c = false;
                        if(parsername.verbose){System.out.println("Local vars: "+localVariables);}

                        //Return a value
                        if(data.get("TYPE").toString().equals("INT")) {
                                try {
                                        a = parser_return.integerExpression(map, localVariables, fps);
                                }catch (Exception e){
                                        System.out.println("Incorrect return type - should be INT");
                                System.exit(-1) ;
                                }
                                {if (true) return a;}
                        }
                        else if(data.get("TYPE").toString().equals("FLOAT"))
                        {
                                try {
                                        b = parser_return.floatExpression(map, localVariables, fps);
                                }catch (Exception e){
                                        System.out.println("Incorrect return type - should be FLOAT");
                                System.exit(-1) ;
                                }
                                {if (true) return b;}
                        }
                        else {
                                //TO DO - > ADD COMPARATIVE STATEMENTS HERE
                                try {
                                        //It is either a boolean expression
                                        c = parser_return.booleanExpression(map, localVariables, fps);
                                }catch (Exception e){
                                        //Or comparison statement
                                        if(parsername.verbose){System.out.println("Not a boolean expression - check for comparative expression");}
                                        try {
                                                returnStream = new ByteArrayInputStream(return_contents.getBytes());
                                                parser_return = new parsername(returnStream);
                                                c = parser_return.comparison(map, localVariables, fps);
                                        }catch (Exception f){
                                                System.out.println("Incorrect return type - should be BOOLEAN");
                                        System.exit(-1) ;
                                }
                                }
                                {if (true) return c;}
                        }
            }
            catch (Exception e)
            {
                System.out.println("Something went wrong in a function - exception detected.");
                System.out.println(e.getMessage());
                System.exit(-1) ;
            }
            catch (Error e)
            {
                System.out.println("Something went wrong in a function - error detected.");
                System.out.println(e.getMessage());
                System.exit(-1) ;
            }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) return true;
    }
    }
    if (jj_scan_token(63)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public parsernameTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[72];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x6307de00,0xffc7fe00,0xffc7fe00,0xffc7fe00,0x20400,0x800000,0x20400,0x60000000,0x800000,0x60000000,0x40400,0x800000,0x40400,0x1c000000,0x1c000000,0x9c100000,0x61110000,0x9c100000,0x600,0x600,0x1800,0x1800,0x1120400,0x1120000,0x8000,0x4000,0x61110000,0x61100000,0x600,0x600,0x1800,0x1800,0x1140400,0x1140000,0x0,0x0,0x0,0x0,0x61110000,0x9c100000,0x0,0x61110000,0x9c100000,0x9c100000,0x0,0x0,0x0,0x9c100000,0x61110000,0x6307de00,0xffc7fe00,0xffc7fe00,0x1c000000,0x800000,0x1c000000,0x1000000,0xffc7fe00,0x0,0x800000,0x0,0x1000000,0x1c000000,0x1c000000,0x800000,0x1c000000,0x1000000,0xffc7fe00,0xffc7fe00,0x0,0x800000,0x0,0x1000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x3fffe00,0x3ffff8f,0x3ffffaf,0x3ffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x20000000,0xf90,0x3fff400,0xf90,0x0,0x0,0x0,0x0,0x200,0x200,0x0,0x0,0x400,0x400,0x0,0x0,0x0,0x0,0x800,0x800,0x3fff000,0x3000,0xfc000,0x3f00000,0x3fff400,0xf90,0x2,0x3fff400,0xf90,0xf90,0x9,0xe00,0xe00,0xf90,0x3fff400,0x3fffe00,0x3ffffbf,0x3ffffbf,0x0,0x0,0x0,0x0,0x3ffffff,0xe00,0x0,0xe00,0x0,0x0,0x0,0x0,0x0,0x0,0x3ffffff,0x3ffffff,0xe00,0x0,0xe00,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[5];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public parsername(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public parsername(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new parsernameTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 72; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 72; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public parsername(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new parsernameTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 72; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 72; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public parsername(parsernameTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 72; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(parsernameTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 72; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[66];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 72; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 66; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
