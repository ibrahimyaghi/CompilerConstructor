/* Generated By:JavaCC: Do not edit this line. parsername.java */
import java.util.*;

public class parsername implements parsernameConstants {
  public static void main(String args []) throws ParseException
  {
    parsername parser = new parsername(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter an expression like \u005c"1+(2+3)*4 GLOBAL VERSION;\u005c" :");
      try
      {
        Map<String,Object> map=new HashMap<String,Object>();
        parsername.multipleLines(map);
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        parsername.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

/*---------------------------------------------------------------------*/
/* DECLARE VARIABLES
/* We allow only simple initializations by values
/* No statements allowed here
/* We do not allow initialization of the same variable twice 
/*---------------------------------------------------------------------*/
  static final public void declareINT(Map map, boolean execute) throws ParseException {
 String a;
    jj_consume_token(17);
    jj_consume_token(INT_VARNAME);
                           a = token.toString();
    jj_consume_token(18);
    jj_consume_token(INTEGER);
                if(map.containsKey(a)){System.out.println("Variable already declared. Exiting.."); System.exit(-1);}
                        if(execute){map.put(a, Integer.parseInt(token.image));}
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(19);
      jj_consume_token(INT_VARNAME);
                           a = token.toString();
      jj_consume_token(18);
      jj_consume_token(INTEGER);
                if(map.containsKey(a)){System.out.println("Variable already declared. Exiting.."); System.exit(-1);}
                        if(execute){map.put(a, Integer.parseInt(token.image));}
    }
    jj_consume_token(20);
  }

  static final public void declareBOOL(Map map, boolean execute) throws ParseException {
 String a;
    jj_consume_token(21);
    jj_consume_token(BOOL_VARNAME);
                              a = token.toString();
    jj_consume_token(18);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 22:
      jj_consume_token(22);
      break;
    case 23:
      jj_consume_token(23);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        if(map.containsKey(a)){System.out.println("Variable already declared. Exiting.."); System.exit(-1);}
                                        if(execute){map.put(a, Boolean.parseBoolean(token.image)); }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(19);
      jj_consume_token(BOOL_VARNAME);
                                  a = token.toString();
      jj_consume_token(18);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 22:
        jj_consume_token(22);
        break;
      case 23:
        jj_consume_token(23);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                        if(map.containsKey(a)){System.out.println("Variable already declared. Exiting.."); System.exit(-1);}
                                        if(execute){map.put(a, Boolean.parseBoolean(token.image));}
    }
    jj_consume_token(20);
  }

  static final public void declareFLOAT(Map map, boolean execute) throws ParseException {
 String a;
    jj_consume_token(24);
    jj_consume_token(FLOAT_VARNAME);
                             a = token.toString();
    jj_consume_token(18);
    jj_consume_token(FLOAT);
            if(map.containsKey(a)){System.out.println("Variable already declared. Exiting.."); System.exit(-1);}
                if(execute){map.put(a, Double.parseDouble(token.image));}
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      jj_consume_token(19);
      jj_consume_token(FLOAT_VARNAME);
                             a = token.toString();
      jj_consume_token(18);
      jj_consume_token(FLOAT);
            if(map.containsKey(a)){System.out.println("Variable already declared. Exiting.."); System.exit(-1);}
                if(execute){map.put(a, Double.parseDouble(token.image));}
    }
    jj_consume_token(20);
  }

/*---------------------------------------------------------------------*/
/* SINGLE/MULTIPLE LINES STATS HERE*/
/*---------------------------------------------------------------------*/
  static final public void multipleLines(Map map) throws ParseException {
 boolean a, execute = true; int b;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 21:
      case 24:
      case 53:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 53:
        IntegerFunction(map);
                                System.out.println("Function recognized");
        break;
      case 17:
        declareINT(map, execute);
                 System.out.println("Variable(s) declared: " + execute);
        break;
      case 24:
        declareFLOAT(map, execute);
                 System.out.println("Variable(s) declared: " + execute);
        break;
      case 21:
        declareBOOL(map, execute);
                 System.out.println("Variable(s) declared: " + execute);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(25);
    jj_consume_token(VARNAME);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT_VARNAME:
      case BOOL_VARNAME:
      case FLOAT_VARNAME:
      case 46:
      case 51:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
      line(map, true);
    }
    jj_consume_token(26);
                                                 {if (true) return;}
  }

  static final public void line(Map map, boolean execute) throws ParseException {
 boolean a; int b; double c; Token s;
    if (jj_2_1(3)) {
      s = jj_consume_token(BOOL_VARNAME);
      jj_consume_token(18);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL_VARNAME:
      case 22:
      case 23:
      case 27:
      case 31:
        a = booleanStatement(map);
        break;
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
        a = comparison(map);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(20);
    if(!execute){{if (true) return;}}
    if(!map.containsKey(s.toString()))
    {System.out.println("Left operand not declared. Exiting.."); System.exit(-1);}
    System.out.println("Result: " + a);
    map.replace(s.toString(), a);
    {if (true) return;}
    } else if (jj_2_2(3)) {
      s = jj_consume_token(INT_VARNAME);
      jj_consume_token(18);
      b = integerStatement(map);
      jj_consume_token(20);
    if(!execute){{if (true) return;}}
    if(!map.containsKey(s.toString()))
    {System.out.println("Left operand not declared. Exiting.."); System.exit(-1);}
    System.out.println("Result: " + b);
    map.replace(s.toString(), b);
    {if (true) return;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FLOAT_VARNAME:
        s = jj_consume_token(FLOAT_VARNAME);
        jj_consume_token(18);
        c = floatStatement(map);
        jj_consume_token(20);
    if(!execute){{if (true) return;}}
    if(!map.containsKey(s.toString()))
    {System.out.println("Left operand not declared. Exiting.."); System.exit(-1);}
    System.out.println("Result: " + c);
    map.replace(s.toString(), c);
    {if (true) return;}
        break;
      case 46:
        ifStatement(map);
                                                 System.out.println("If statement executed"); {if (true) return;}
        break;
      case 51:
        print(map);
                                                 {if (true) return;}
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/*---------------------------------------------------------------------*/
/*INTEGER ARITHMETIC STATS HERE*/
/*---------------------------------------------------------------------*/
  static final public int integerStatement(Map map) throws ParseException {
 int a, b;
    a = aterm(map);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        b = aterm(map);
                               a += b;
        break;
      case MINUS:
        jj_consume_token(MINUS);
        b = aterm(map);
                                                                      a -= b;
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public int aterm(Map map) throws ParseException {
 int a, b;
    a = asubterm(map);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        jj_consume_token(MULTIPLY);
        b = asubterm(map);
                                    a *= b;
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
        b = asubterm(map);
                                                                             a /= b;
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public int asubterm(Map map) throws ParseException {
 int a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      a = abase(map);
                            {if (true) return -a;}
      break;
    case INTEGER:
    case INT_VARNAME:
    case 27:
      a = abase(map);
                                                          {if (true) return a;}
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public int abase(Map map) throws ParseException {
 int a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      jj_consume_token(INTEGER);
                 a = Integer.parseInt(token.image);
      break;
    case 27:
      jj_consume_token(27);
      a = integerStatement(map);
      jj_consume_token(28);
      break;
    case INT_VARNAME:
      jj_consume_token(INT_VARNAME);
                     a = (Integer) map.get(token.toString());
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

/*---------------------------------------------------------------------*/
/*BOOLEAN ARITHMETIC STATS HERE*/
/*---------------------------------------------------------------------*/
  static final public boolean booleanStatement(Map map) throws ParseException {
 boolean a,b;
    a = bterm(map);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 29:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_8;
      }
      jj_consume_token(29);
      b = bterm(map);
                          a = a || b;
    }
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public boolean bterm(Map map) throws ParseException {
 boolean a, b;
    a = bsubterm(map);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 30:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_9;
      }
      jj_consume_token(30);
      b = bsubterm(map);
                             a = a && b;
    }
   {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public boolean bsubterm(Map map) throws ParseException {
 boolean a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
      jj_consume_token(31);
      a = bbase(map);
                        {if (true) return !a;}
      break;
    case BOOL_VARNAME:
    case 22:
    case 23:
    case 27:
      a = bbase(map);
                                                      {if (true) return a;}
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public boolean bbase(Map map) throws ParseException {
 boolean a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 22:
      jj_consume_token(22);
          a = Boolean.parseBoolean(token.image);
      break;
    case 23:
      jj_consume_token(23);
           a = Boolean.parseBoolean(token.image);
      break;
    case 27:
      jj_consume_token(27);
      a = booleanStatement(map);
      jj_consume_token(28);
      break;
    case BOOL_VARNAME:
      jj_consume_token(BOOL_VARNAME);
                    a = (Boolean) map.get(token.toString());
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

/*---------------------------------------------------------------------*/
/*FLOAT ARITHMETIC STATS HERE*/
/*---------------------------------------------------------------------*/
  static final public double floatStatement(Map map) throws ParseException {
 double a, b;
    a = fterm(map);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        b = fterm(map);
                               a += b;
        break;
      case MINUS:
        jj_consume_token(MINUS);
        b = fterm(map);
                                                                      a -= b;
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public double fterm(Map map) throws ParseException {
 double a, b;
    a = fsubterm(map);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        jj_consume_token(MULTIPLY);
        b = fsubterm(map);
                                    a *= b;
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
        b = fsubterm(map);
                                                                             a /= b;
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public double fsubterm(Map map) throws ParseException {
 double a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      a = fbase(map);
                            {if (true) return -a;}
      break;
    case FLOAT:
    case FLOAT_VARNAME:
    case 27:
      a = fbase(map);
                                                          {if (true) return a;}
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public double fbase(Map map) throws ParseException {
 double a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOAT:
      jj_consume_token(FLOAT);
               a = Double.parseDouble(token.image);
      break;
    case 27:
      jj_consume_token(27);
      a = floatStatement(map);
      jj_consume_token(28);
      break;
    case FLOAT_VARNAME:
      jj_consume_token(FLOAT_VARNAME);
                       a = (double) map.get(token.toString());
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

/*---------------------------------------------------------------------*/
/*COMPARISON STATEMENTS STATS HERE*/
/*---------------------------------------------------------------------*/
  static final public boolean comparison(Map map) throws ParseException {
 boolean a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 32:
    case 33:
      a = booleanComparison(map);
      break;
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
      a = integerComparison(map);
      break;
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
      a = floatComparison(map);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public boolean booleanComparison(Map map) throws ParseException {
 boolean a, b;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 32:
      jj_consume_token(32);
      a = booleanStatement(map);
      b = booleanStatement(map);
                                                                    {if (true) return a == b;}
      break;
    case 33:
      jj_consume_token(33);
      a = booleanStatement(map);
      b = booleanStatement(map);
                                                                    {if (true) return a != b;}
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public boolean integerComparison(Map map) throws ParseException {
 int a, b;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 34:
      jj_consume_token(34);
      a = integerStatement(map);
      b = integerStatement(map);
                                                                    {if (true) return a == b;}
      break;
    case 35:
      jj_consume_token(35);
      a = integerStatement(map);
      b = integerStatement(map);
                                                                    {if (true) return a != b;}
      break;
    case 36:
      jj_consume_token(36);
      a = integerStatement(map);
      b = integerStatement(map);
                                                                    {if (true) return a >= b;}
      break;
    case 37:
      jj_consume_token(37);
      a = integerStatement(map);
      b = integerStatement(map);
                                                                    {if (true) return a <= b;}
      break;
    case 38:
      jj_consume_token(38);
      a = integerStatement(map);
      b = integerStatement(map);
                                                                    {if (true) return a > b;}
      break;
    case 39:
      jj_consume_token(39);
      a = integerStatement(map);
      b = integerStatement(map);
                                                                    {if (true) return a < b;}
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public boolean floatComparison(Map map) throws ParseException {
 double a, b;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 40:
      jj_consume_token(40);
      a = floatStatement(map);
      b = floatStatement(map);
                                                                {if (true) return a == b;}
      break;
    case 41:
      jj_consume_token(41);
      a = floatStatement(map);
      b = floatStatement(map);
                                                                {if (true) return a != b;}
      break;
    case 42:
      jj_consume_token(42);
      a = floatStatement(map);
      b = floatStatement(map);
                                                                {if (true) return a >= b;}
      break;
    case 43:
      jj_consume_token(43);
      a = floatStatement(map);
      b = floatStatement(map);
                                                                {if (true) return a <= b;}
      break;
    case 44:
      jj_consume_token(44);
      a = floatStatement(map);
      b = floatStatement(map);
                                                                {if (true) return a > b;}
      break;
    case 45:
      jj_consume_token(45);
      a = floatStatement(map);
      b = floatStatement(map);
                                                                {if (true) return a < b;}
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*---------------------------------------------------------------------*/
/*IF STATEMENT STARTS HERE*/
/*---------------------------------------------------------------------*/
  static final public void ifStatement(Map map) throws ParseException {
        boolean execute = false; boolean done = false;
        Map<String,Object> localVariables = new HashMap<String,Object>();
    jj_consume_token(46);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
      execute = comparison(map);
      break;
    case BOOL_VARNAME:
    case 22:
    case 23:
    case 27:
    case 31:
      execute = booleanStatement(map);
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         done = execute; System.out.println("\u005cnIf executed: " + execute);
    jj_consume_token(47);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT_VARNAME:
      case BOOL_VARNAME:
      case FLOAT_VARNAME:
      case 46:
      case 51:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_12;
      }
      line(map, execute);
    }
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 48:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_13;
      }
      jj_consume_token(48);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
        execute = comparison(map);
        break;
      case BOOL_VARNAME:
      case 22:
      case 23:
      case 27:
      case 31:
        execute = booleanStatement(map);
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
           execute = execute && !done; done = done || execute; System.out.println("Elseif executed: " + execute);
      jj_consume_token(47);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT_VARNAME:
        case BOOL_VARNAME:
        case FLOAT_VARNAME:
        case 46:
        case 51:
          ;
          break;
        default:
          jj_la1[34] = jj_gen;
          break label_14;
        }
        line(map, execute);
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 49:
      jj_consume_token(49);
      jj_consume_token(47);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT_VARNAME:
        case BOOL_VARNAME:
        case FLOAT_VARNAME:
        case 46:
        case 51:
          ;
          break;
        default:
          jj_la1[35] = jj_gen;
          break label_15;
        }
        line(map, !done);
      }
                                             System.out.println("Else executed: " + !done);
      jj_consume_token(50);
      break;
    case 50:
      jj_consume_token(50);
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*---------------------------------------------------------------------*/
/*PRINT FUNCTION STARTS HERE*/
/*---------------------------------------------------------------------*/
  static final public void print(Map map) throws ParseException {
 boolean a; int b; double c;
    jj_consume_token(51);

    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOAT_VARNAME:
      jj_consume_token(FLOAT_VARNAME);
                       c = (double)  map.get(token.toString()); System.out.println(token.toString()+"="+c);
      break;
    case BOOL_VARNAME:
      jj_consume_token(BOOL_VARNAME);
                       a = (Boolean) map.get(token.toString()); System.out.println(token.toString()+"="+a);
      break;
    case INT_VARNAME:
      jj_consume_token(INT_VARNAME);
                       b = (Integer) map.get(token.toString()); System.out.println(token.toString()+"="+b);
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(52);
  }

/*---------------------------------------------------------------------*/
/*FUNCTIONS START HERE*/
/*---------------------------------------------------------------------*/

//TO BE DONE
  static final public int IntegerFunction(Map map) throws ParseException {
    jj_consume_token(53);
                {if (true) return 0;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3R_57() {
    if (jj_scan_token(BOOL_VARNAME)) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_scan_token(27)) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_scan_token(23)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(INT_VARNAME)) return true;
    if (jj_scan_token(18)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(22)) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(31)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(BOOL_VARNAME)) return true;
    if (jj_scan_token(18)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_scan_token(45)) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(44)) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_scan_token(43)) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_scan_token(42)) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(41)) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(40)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(39)) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(38)) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(37)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_scan_token(36)) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(35)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(34)) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_scan_token(33)) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_scan_token(INT_VARNAME)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(32)) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_scan_token(27)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public parsernameTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[38];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80000,0xc00000,0x80000,0xc00000,0x80000,0x1220000,0x1220000,0x1c000,0x88c08000,0x10000,0x60,0x60,0x180,0x180,0x8004240,0x8004200,0x20000000,0x40000000,0x88c08000,0x8c08000,0x60,0x60,0x180,0x180,0x8010440,0x8010400,0x0,0x0,0x0,0x0,0x88c08000,0x1c000,0x0,0x88c08000,0x1c000,0x1c000,0x0,0x1c000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x200000,0x200000,0x84000,0x3fff,0x84000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3fff,0x3,0xfc,0x3f00,0x3fff,0x84000,0x10000,0x3fff,0x84000,0x84000,0x60000,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public parsername(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public parsername(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new parsernameTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public parsername(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new parsernameTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public parsername(parsernameTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(parsernameTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[54];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 38; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 54; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
