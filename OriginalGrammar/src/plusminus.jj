/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

/*---------------------------------------------------------------------*/
/* TO DO LIST / BUGS TO FIX 										   */
/*-----------------------------------------------------------------------

[TO DO]	Local variables
	{Perform a deep copy of local variables in if}
	{Access local variables in expressions, ifs, etc}

[TO DO] While statement - Ibrahim

[TO DO] Functions - Amarilda

[TO DO] Procedures - Pawe≈Ç

[TO DO] Extend printing statement values (Variables for now)

[MAYBE CHANGE] Delete ELSEIF

[MAYBE CHANGE] Comparison as a part of boolean statement

[MAYBE CHANGE] Operation with semicolon consistency

[FIX] Figure out why we have warning in floatExpression and integerExpression 
---------------------------------------------------------------------*/

PARSER_BEGIN(parsername)
import java.util.*;

public class parsername
{
  public static void main(String args []) throws ParseException
  {
    parsername parser = new parsername(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter an expression like \"1+(2+3)*4 GLOBAL VERSION;\" :");
      try
      {
        Map<String,Object> map=new HashMap<String,Object>(); 
        parsername.multipleLines(map);
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        parsername.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}

PARSER_END(parsername)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < PLUS     : "+" >
| < MINUS    : "-" >
| < MULTIPLY : "*" >
| < DIVIDE   : "/" >
}

TOKEN :
{
  < INTEGER : (< DIGIT >)+ >
| < FLOAT   : (< DIGIT >)+"."(< DIGIT >)+>
| < #DIGIT  : [ "0"-"9" ] >
| < VARNAME : < LETTER >(< LETTER >|< DIGIT >)* >
| < LETTER  : [ "a"-"z" ] > 
}


/*
If LETTER is not below VARNAME, VARNAMEs with just 1 letter are
treated as LETTER and result in errors
*/

TOKEN: /* DATA TYPES */
{
  < INT_VARNAME   : "I" <VARNAME> > 
| < BOOL_VARNAME  : "B" <VARNAME> > 
| < FLOAT_VARNAME : "F" <VARNAME> > 
}

/*---------------------------------------------------------------------*/
/* DECLARE VARIABLES
/* We allow only simple initializations by values
/* No statements allowed here
/* We do not allow initialization of the same variable twice 
/*---------------------------------------------------------------------*/

void declareINT(Map map, boolean execute, Map globals):
{String a;}
{
    "INT" < INT_VARNAME > {a = token.toString();} "="
    (
    <INTEGER> { if(map.containsKey(a) || globals.containsKey(a)){System.out.println("Variable already declared. Exiting.."); System.exit(-1);}
      			if(execute){map.put(a, Integer.parseInt(token.image));}} |
	<MINUS> <INTEGER> { if(map.containsKey(a) || globals.containsKey(a)){System.out.println("Variable already declared. Exiting.."); System.exit(-1);}
      			if(execute){map.put(a, -1*Integer.parseInt(token.image));}} 
    )
	(","  < INT_VARNAME > {a = token.toString();} "="
		( 
    		<INTEGER> { if(map.containsKey(a) || globals.containsKey(a)){System.out.println("Variable already declared. Exiting.."); System.exit(-1);}
      			if(execute){map.put(a, Integer.parseInt(token.image));}}|
			<MINUS> <INTEGER> { if(map.containsKey(a) || globals.containsKey(a)){System.out.println("Variable already declared. Exiting.."); System.exit(-1);}
      			if(execute){map.put(a, -1*Integer.parseInt(token.image));}} 
		)
	)* ";"
}

void declareBOOL(Map map, boolean execute, Map globals):
{String a;}
{
  "BOOLEAN" < BOOL_VARNAME > {a = token.toString();} "="
  ("TRUE" | "FALSE") {  if(map.containsKey(a) || globals.containsKey(a)){System.out.println("Variable already declared. Exiting.."); System.exit(-1);}
    					if(execute){map.put(a, Boolean.parseBoolean(token.image)); }}
  ("," 		< BOOL_VARNAME > {a = token.toString();} "="
  ("TRUE" | "FALSE") {  if(map.containsKey(a) || globals.containsKey(a)){System.out.println("Variable already declared. Exiting.."); System.exit(-1);}
    					if(execute){map.put(a, Boolean.parseBoolean(token.image));}})* ";"
}

void declareFLOAT(Map map, boolean execute, Map globals):
{String a;}
{
  "FLOAT" < FLOAT_VARNAME > {a = token.toString();} "="
  (    <FLOAT> { if(map.containsKey(a) || globals.containsKey(a)){System.out.println("Variable already declared. Exiting.."); System.exit(-1);}
    		if(execute){map.put(a, Double.parseDouble(token.image));}} |
	<MINUS> <FLOAT> { if(map.containsKey(a) || globals.containsKey(a)){System.out.println("Variable already declared. Exiting.."); System.exit(-1);}
    		if(execute){map.put(a, -1*Double.parseDouble(token.image));}} 
  )
  (","    < FLOAT_VARNAME > {a = token.toString();} "="
  	(    	<FLOAT> { if(map.containsKey(a) || globals.containsKey(a)){System.out.println("Variable already declared. Exiting.."); System.exit(-1);}
    		if(execute){map.put(a, Double.parseDouble(token.image));}} |
  		<MINUS> <FLOAT> { if(map.containsKey(a) || globals.containsKey(a)){System.out.println("Variable already declared. Exiting.."); System.exit(-1);}
    		if(execute){map.put(a, -1*Double.parseDouble(token.image));}}
  	)
  )* ";"
}

/*---------------------------------------------------------------------*/
/* SINGLE/MULTIPLE LINES STATS HERE*/
/*---------------------------------------------------------------------*/

void multipleLines(Map map):
{boolean a, execute = true; int b; Map<String,Object> mainLocal = new HashMap<String,Object>();}
{
  //Arbitrary name for the program
  "PROGRAM" <VARNAME>
  
  //Then declaration of global variables and functions
  (	  IntegerFunction(map)
  		{System.out.println("Integer function recognized");}
 	| ProcedureDeclaration(map, map)
 		{System.out.println("Procedure recognized");}
  	| declareINT(map, execute, map)
  		{System.out.println("Global variable(s) declared: " + execute);}
	| declareFLOAT(map, execute, map)
		{System.out.println("Global variable(s) declared: " + execute);}
	| declareBOOL(map, execute, map)
		{System.out.println("Global variable(s) declared: " + execute);}
  )*
  
  //MAIN procedure
  {System.out.println("\nEntering main");}
  "MAIN" (line(map, true, mainLocal))* "ENDMAIN"
  	{System.out.println("Exiting main\n") ;return;}
}

void line(Map map, boolean execute, Map local) :
{boolean a; int b; double c; Token s;}
{
/*	Boolean value can be return either by boolean statement
	or by any type of comparison, so we basically allow sth like:
	Bb = EQB TRUE FALSE; 											*/

  
  LOOKAHEAD(3)
  s = < BOOL_VARNAME > "=" (a = booleanExpression(map) | a = comparison(map)) ";" 
  {
    if(!execute){return;}
    if(!map.containsKey(s.toString()))
    {System.out.println("Left operand not declared. Exiting.."); System.exit(-1);}
    System.out.println("Result: " + a);
    map.replace(s.toString(), a);
    return;
  }
| LOOKAHEAD(3)
  s = < INT_VARNAME > "=" b = integerExpression(map) ";" 
  {
    if(!execute){return;}
    if(!map.containsKey(s.toString()))
    {System.out.println("Left operand not declared. Exiting.."); System.exit(-1);}
    System.out.println("Result: " + b);
    map.replace(s.toString(), b);
    return;
  }
| s = < FLOAT_VARNAME > "=" c = floatExpression(map) ";" 
  {
    if(!execute){return;}
    if(!map.containsKey(s.toString()))
    {System.out.println("Left operand not declared. Exiting.."); System.exit(-1);}
    System.out.println("Result: " + c);
    map.replace(s.toString(), c);
    return;
  }

| declareINT(local, execute, map)   	{System.out.println("Local variable(s) declared: " + execute); return;}
| declareFLOAT(local, execute, map) 	{System.out.println("Local variable(s) declared: " + execute); return;}
| declareBOOL(local, execute, map)  	{System.out.println("Local variable(s) declared: " + execute); return;}

| ifStatement(map)						{System.out.println("End of IF statement\n"); return;}
| print(map)							{return;}
}

/*---------------------------------------------------------------------*/
/*INTEGER ARITHMETIC STATS HERE*/
/*---------------------------------------------------------------------*/

int integerExpression(Map map) :
{int a, b;}
{
  a = aterm(map)
  ( < PLUS >   b = aterm(map) {a += b; } | < MINUS >  b = aterm(map) {a -= b; } )*
  {return a; }
}

int aterm(Map map) :
{int a, b;}
{
  a = asubterm(map)
  ( < MULTIPLY > b = asubterm(map) {a *= b; }| < DIVIDE > b = asubterm(map) {a /= b; } )*
  {return a; }
}

int asubterm(Map map) :
{int a;}
{
  < MINUS > a = abase(map) {return -a;} | a = abase(map) {return a;}
}

int abase(Map map) :
{int a;}
{
  (
    < INTEGER > {a = Integer.parseInt(token.image);} | "(" a=integerExpression(map) ")"
  | < INT_VARNAME > {a = (Integer) map.get(token.toString());}
  ){return a;}
}

/*---------------------------------------------------------------------*/
/*BOOLEAN ARITHMETIC STATS HERE*/
/*---------------------------------------------------------------------*/

boolean booleanExpression(Map map) :
{boolean a,b;}
{
  a = bterm(map)
  ( "OR"  b = bterm(map) {a = a || b; } )*
  { return a;}
}

boolean bterm(Map map) :
{boolean a, b;}
{
  a = bsubterm(map)
  ( "AND" b = bsubterm(map) {a = a && b;} )*
  {return a;}
}

boolean bsubterm(Map map) :
{boolean a;}
{
  "NOT" a = bbase(map) {return !a;} | a = bbase(map) {return a;}
}

boolean bbase(Map map) :
{boolean a;}
{
  (
  "TRUE" {a = Boolean.parseBoolean(token.image);} |
  "FALSE" {a = Boolean.parseBoolean(token.image);} |
  "(" a=booleanExpression(map) ")" |
  < BOOL_VARNAME > {a = (Boolean) map.get(token.toString());}
  ){return a;}
}

/*---------------------------------------------------------------------*/
/*FLOAT ARITHMETIC STATS HERE*/
/*---------------------------------------------------------------------*/

double floatExpression(Map map) :
{double a, b;}
{
  a = fterm(map)
  ( < PLUS >   b = fterm(map) {a += b; } | < MINUS >  b = fterm(map) {a -= b; } )*
  {return a;}
}

double fterm(Map map) :
{double a, b;}
{
  a = fsubterm(map)
  ( < MULTIPLY > b = fsubterm(map) {a *= b; }| < DIVIDE > b = fsubterm(map) {a /= b; } )*
  {return a;}
}

double fsubterm(Map map) :
{double a;}
{
  < MINUS > a = fbase(map) {return -a;} | a = fbase(map) {return a;}
}

double fbase(Map map) :
{double a;}
{
  (
    < FLOAT > {a = Double.parseDouble(token.image);} | "(" a=floatExpression(map) ")"
  | < FLOAT_VARNAME > {a = (double) map.get(token.toString());}
  )
  {return a;}
}

/*---------------------------------------------------------------------*/
/*COMPARISON STATEMENTS STATS HERE*/
/*---------------------------------------------------------------------*/

boolean comparison(Map map) :
{boolean a;}
{
	(a = booleanComparison(map) | a = integerComparison(map) | a = floatComparison(map))
	{return a;}
}

boolean booleanComparison(Map map) :
{boolean a, b;}
{
	"EQB"  a = booleanExpression(map) b = booleanExpression(map) {return a == b;}
|	"NEQB" a = booleanExpression(map) b = booleanExpression(map) {return a != b;} 
}

boolean integerComparison(Map map) :
{int a, b;}
{
	"EQI"  a = integerExpression(map) b = integerExpression(map) {return a == b;}
|	"NEQI" a = integerExpression(map) b = integerExpression(map) {return a != b;}
|	"GEI"  a = integerExpression(map) b = integerExpression(map) {return a >= b;}
|	"LEI"  a = integerExpression(map) b = integerExpression(map) {return a <= b;}
|	"GI"   a = integerExpression(map) b = integerExpression(map) {return a > b;}
|	"LI"   a = integerExpression(map) b = integerExpression(map) {return a < b;}
}

boolean floatComparison(Map map) :
{double a, b;}
{
	"EQF"  a = floatExpression(map) b = floatExpression(map) {return a == b;}
|	"NEQF" a = floatExpression(map) b = floatExpression(map) {return a != b;}
|	"GEF"  a = floatExpression(map) b = floatExpression(map) {return a >= b;}
|	"LEF"  a = floatExpression(map) b = floatExpression(map) {return a <= b;}
|	"GF"   a = floatExpression(map) b = floatExpression(map) {return a > b;}
|	"LF"   a = floatExpression(map) b = floatExpression(map) {return a < b;}
}

/*---------------------------------------------------------------------*/
/*IF STATEMENT STARTS HERE*/
/*---------------------------------------------------------------------*/

void ifStatement(Map map) :
{
 	boolean execute = false; boolean done = false;
	Map<String,Object> localVariables = new HashMap<String,Object>();
}
{ 
  	//PERFORM A DEEP COPY OF CURRENT LOCAL VARIABLES
  	
	"IF" (execute = comparison(map) | execute = booleanExpression(map))
	{done = execute; System.out.println("\nIf executed: " + execute);}
	"THEN" (line(map, execute, localVariables))*
	(
	  "ELSEIF" (execute = comparison(map) | execute = booleanExpression(map))
	  {execute = execute && !done; done = done || execute; System.out.println("Elseif executed: " + execute);}	  
	  "THEN" (line(map, execute, localVariables))*
	)*
	(("ELSE" {System.out.println("Else executed: " + !done);} "THEN" (line(map, !done, localVariables))* "ENDIF") | "ENDIF")
}

/*---------------------------------------------------------------------*/
/*PRINT FUNCTION STARTS HERE*/
/*---------------------------------------------------------------------*/
void print(Map map):
{boolean a; int b; double c;}
{
  "PRINT(" {}(
    < FLOAT_VARNAME > {c = (double)  map.get(token.toString()); System.out.println(token.toString()+"="+c);}
  | < BOOL_VARNAME >  {a = (Boolean) map.get(token.toString()); System.out.println(token.toString()+"="+a);}
  | < INT_VARNAME >   {b = (Integer) map.get(token.toString()); System.out.println(token.toString()+"="+b);}
  )");"
}

/*---------------------------------------------------------------------*/
/*PROCEDURE START HERE*/
/*---------------------------------------------------------------------*/
void ProcedureDeclaration(Map map, Map localvariables):
{Map<String,Object> localVariables = new HashMap<String,Object>();}
{
	"PROC" <VARNAME>
	(	  	(	  		"(" (("INT" < INT_VARNAME >) | ("FLOAT" < FLOAT_VARNAME >) | ("BOOLEAN" < BOOL_VARNAME >)) 
		)
		(
	  		"," (("INT" < INT_VARNAME >) | ("FLOAT" < FLOAT_VARNAME >) | ("BOOLEAN" < BOOL_VARNAME >))
		)* ")"
		| "()"
	)
	//SAVE THOSE INSTRUCTIONS SOMEWHERE TO EXECUTE LATER
	//ADD LOCAL VARIABLE ASSIGNMENT - > VARIABLE PASSED AS FUNCTION PARAMETERS
	(line(map, false, localVariables))*
	"ENDPROC"
}


/*---------------------------------------------------------------------*/
/*FUNCTIONS START HERE*/
/*---------------------------------------------------------------------*/

//TO BE DONE
int IntegerFunction(Map map):
{}
{
	"FUNC" {return 0;}
}

