/* Generated By:JavaCC: Do not edit this line. parsernameConstants.java */
package compilerpackage;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface parsernameConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PLUS = 9;
  /** RegularExpression Id. */
  int MINUS = 10;
  /** RegularExpression Id. */
  int MULTIPLY = 11;
  /** RegularExpression Id. */
  int DIVIDE = 12;
  /** RegularExpression Id. */
  int EQUAL = 13;
  /** RegularExpression Id. */
  int AND = 14;
  /** RegularExpression Id. */
  int OR = 15;
  /** RegularExpression Id. */
  int NOT = 16;
  /** RegularExpression Id. */
  int INTEGER = 17;
  /** RegularExpression Id. */
  int FLOAT = 18;
  /** RegularExpression Id. */
  int DIGIT = 19;
  /** RegularExpression Id. */
  int VARNAME = 20;
  /** RegularExpression Id. */
  int LETTER = 21;
  /** RegularExpression Id. */
  int SEMICOLON = 22;
  /** RegularExpression Id. */
  int COMMA = 23;
  /** RegularExpression Id. */
  int LPARENTHESIS = 24;
  /** RegularExpression Id. */
  int RPARENTHESIS = 25;
  /** RegularExpression Id. */
  int INT = 26;
  /** RegularExpression Id. */
  int DOUBLE = 27;
  /** RegularExpression Id. */
  int BOOLEAN = 28;
  /** RegularExpression Id. */
  int TRUE = 29;
  /** RegularExpression Id. */
  int FALSE = 30;
  /** RegularExpression Id. */
  int IF = 31;
  /** RegularExpression Id. */
  int ELSE = 32;
  /** RegularExpression Id. */
  int ELSEIF = 33;
  /** RegularExpression Id. */
  int THEN = 34;
  /** RegularExpression Id. */
  int ENDIF = 35;
  /** RegularExpression Id. */
  int WHILE = 36;
  /** RegularExpression Id. */
  int DO = 37;
  /** RegularExpression Id. */
  int ENDWHILE = 38;
  /** RegularExpression Id. */
  int PRINT = 39;
  /** RegularExpression Id. */
  int WRITE = 40;
  /** RegularExpression Id. */
  int INT_VARNAME = 41;
  /** RegularExpression Id. */
  int BOOL_VARNAME = 42;
  /** RegularExpression Id. */
  int FLOAT_VARNAME = 43;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int COMMENT_STATE = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<token of kind 1>",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 4>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"=\"",
    "\"AND\"",
    "\"OR\"",
    "\"NOT\"",
    "<INTEGER>",
    "<FLOAT>",
    "<DIGIT>",
    "<VARNAME>",
    "<LETTER>",
    "\";\"",
    "\",\"",
    "\"(\"",
    "\")\"",
    "\"INT\"",
    "\"FLOAT\"",
    "\"BOOLEAN\"",
    "\"TRUE\"",
    "\"FALSE\"",
    "\"IF\"",
    "\"ELSE\"",
    "\"ELSEIF\"",
    "\"THEN\"",
    "\"ENDIF\"",
    "\"WHILE\"",
    "\"DO\"",
    "\"ENDWHILE\"",
    "\"PRINT\"",
    "\"WRITE\"",
    "<INT_VARNAME>",
    "<BOOL_VARNAME>",
    "<FLOAT_VARNAME>",
    "\"EQB\"",
    "\"NEQB\"",
    "\"EQI\"",
    "\"NEQI\"",
    "\"GEI\"",
    "\"LEI\"",
    "\"GI\"",
    "\"LI\"",
    "\"EQF\"",
    "\"NEQF\"",
    "\"GEF\"",
    "\"LEF\"",
    "\"GF\"",
    "\"LF\"",
    "\"PROGRAM\"",
    "\"MAIN\"",
    "\"ENDMAIN\"",
    "\"PROC\"",
    "\"ENDPROC\"",
    "\"FUNC\"",
    "\"RETURN\"",
    "\"ENDFUNC\"",
  };

}
